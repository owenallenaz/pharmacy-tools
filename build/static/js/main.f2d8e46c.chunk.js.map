{"version":3,"sources":["Results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledTable","styled","table","Results","concentration","dose","volume","tableData","map","mgHour","i","mlHour","toInfuse","elapsed","role","aria-label","className","val","key","Math","round","type","StyledDiv","div","App","useState","setDose","setVolume","TextField","label","variant","value","onChange","e","target","autoFocus","Number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"09BAGA,IAAMA,EAAcC,IAAOC,MAAV,KA+FFC,MAhDf,YAAsE,IAC/DC,EAD8D,EAAlDC,KAAkD,EAA5CC,OAIlBC,EAFQ,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEzBC,KAAI,SAACC,EAAQC,GACrC,IAAMC,EAASF,EAASL,EAGxB,MAAO,CACLK,SACAE,SACAC,SALeD,EAAS,EAMxBE,QALwB,IAATH,EAAI,OASpB,OACD,gBAACV,EAAD,KACE,6BACD,0BACC,8CAAqB,wBAAMc,KAAK,MAAMC,aAAW,QAA5B,gBAArB,KACA,0CACA,yCACA,sBAAIC,UAAU,YAAd,cAGD,6BAECT,EAAUC,KAAI,SAACS,EAAKP,GACnB,OACC,sBAAIQ,IAAKD,EAAIR,QACZ,0BACEC,EAAI,EADN,KACWO,EAAIJ,QADf,UAGA,sBAAIG,UAAU,QAAQG,KAAKC,MAAMH,EAAIN,SACrC,sBAAIK,UAAU,QAAQG,KAAKC,MAAMH,EAAIL,WACrC,sBAAII,UAAU,YACb,yBAAOK,KAAK,qB,8dChFnB,IAAMC,EAAYrB,IAAOsB,IAAV,KA6BA,SAASC,IAAO,IAAD,EACLC,mBAAS,IADJ,mBACtBpB,EADsB,KAChBqB,EADgB,OAEDD,mBAAS,OAFR,mBAEtBnB,EAFsB,KAEdqB,EAFc,KAY7B,OACC,gBAACL,EAAD,CAAWN,UAAU,OACpB,iEACA,uBAAKA,UAAU,YACd,2DACA,4DAED,uBAAKA,UAAU,UACd,gBAACY,EAAA,EAAD,CACCZ,UAAU,QACVa,MAAM,sBACNC,QAAQ,WACRC,MAAO1B,EACP2B,SArBiB,SAAUC,GAC9BP,EAAQO,EAAEC,OAAOH,QAqBdI,WAAW,IAEZ,gBAACP,EAAA,EAAD,CACCZ,UAAU,QACVa,MAAM,cACNC,QAAQ,WACRC,MAAOzB,EACP0B,SAzBmB,SAAUC,GAChCN,EAAUM,EAAEC,OAAOH,WA6BR,KAAT1B,GAA0B,KAAXC,GACf,gBAAC,EAAD,CAASD,KAAM+B,OAAO/B,GAAOC,OAAQ8B,OAAO9B,MC/D5B+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f2d8e46c.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table`\r\n\tborder-collapse: collapse;\r\n\twidth: 100%;\r\n\tborder: 1px solid #ccc;\r\n\tborder-radius: 5px;\r\n\r\n\t& thead {\r\n\t\tbackground: #0a5945;\r\n\t\tcolor: white;\r\n\t}\r\n\r\n\t& th {\r\n\t\ttext-align: right;\r\n\t\tborder-bottom: 1px solid #ccc;\r\n\t\tpadding: 10px;\r\n\t\tfont-weight: normal;\r\n\t}\r\n\r\n\t& th:first-child {\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t& td {\r\n\t\ttext-align: right;\r\n\t\tborder-bottom: 1px solid #ccc;\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\t& td.data {\r\n\t\tfont-weight: bold;\r\n\t}\r\n\r\n\t& td:first-child {\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t& tr:nth-child(even) {\r\n\t\tbackground: #0a59451a;\r\n\t}\r\n\r\n\t@media print {\r\n\t\t& thead {\r\n\t\t\tcolor: black;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nfunction Results({ dose, volume }: { dose: number, volume: number }) {\r\n\tconst concentration = dose / volume;\r\n\tconst rates = [50, 100, 150, 200, 250, 300, 350, 400];\r\n\r\n\tconst tableData = rates.map((mgHour, i) => {\r\n\tconst mlHour = mgHour / concentration;\r\n\tconst toInfuse = mlHour / 2;\r\n\tconst elapsed = (i + 1) * 30;\r\n\treturn {\r\n\t  mgHour,\r\n\t  mlHour,\r\n\t  toInfuse,\r\n\t  elapsed\r\n\t};\r\n  });\r\n\r\n  return (\r\n\t<StyledTable>\r\n\t  <thead>\r\n\t\t<tr>\r\n\t\t\t<th>Titration (total <span role=\"img\" aria-label=\"time\">ðŸ•’</span>)</th>\r\n\t\t\t<th>Rate (mL/hr)</th>\r\n\t\t\t<th>Volume (mL)</th>\r\n\t\t\t<th className=\"noScreen\">Complete</th>\r\n\t\t</tr>\r\n\t\t</thead>\r\n\t\t<tbody>\r\n\t\t{\r\n\t\t\ttableData.map((val, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<tr key={val.mgHour}>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{i + 1} ({val.elapsed} mins)\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td className=\"data\">{Math.round(val.mlHour)}</td>\r\n\t\t\t\t\t\t<td className=\"data\">{Math.round(val.toInfuse)}</td>\r\n\t\t\t\t\t\t<td className=\"noScreen\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" />\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</tbody>\r\n\t</StyledTable>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Results from \"./Results\";\nimport TextField from \"@material-ui/core/TextField\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n\tmargin: 0 auto;\n\tmax-width: 800px;\n\n\t& > h1 {\n\t\tfont-size: 22px;\n\t}\n\n\t& > .inputs {\n\t\tmargin-bottom: 12px;\n\t}\n\n\t& > .inputs > :first-child {\n\t\tmargin-right: 12px;\n\t}\n\n\t& .printOnly {\n\t\tdisplay: none;\n\t}\n\n\t@media only screen and (max-width: 820px) {\n\t\tpadding: 0px 10px 0px 10px;\n\n\t\t& > .inputs > :first-child {\n\t\t\tmargin-bottom: 12px;\n\t\t}\n\t}\n`;\n\nexport default function App() {\n\tconst [dose, setDose] = useState(\"\");\n\tconst [volume, setVolume] = useState(\"500\");\n\n\tconst onChangeDose = function (e: React.ChangeEvent<HTMLInputElement>) {\n\t\tsetDose(e.target.value);\n\t};\n\n\tconst onChangeVolume = function (e: React.ChangeEvent<HTMLInputElement>) {\n\t\tsetVolume(e.target.value);\n\t};\n\n\treturn (\n\t\t<StyledDiv className=\"App\">\n\t\t\t<h1>Rituximab First Infusion Calculator</h1>\n\t\t\t<div className=\"noScreen\">\n\t\t\t\t<p>Patient Name: ________________</p>\n\t\t\t\t<p>MRN: _________________________</p>\n\t\t\t</div>\n\t\t\t<div className=\"inputs\">\n\t\t\t\t<TextField\n\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\tlabel=\"Rituximab Dose (mg)\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={dose}\n\t\t\t\t\tonChange={onChangeDose}\n\t\t\t\t\tautoFocus={true}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\tlabel=\"Volume (mL)\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={volume}\n\t\t\t\t\tonChange={onChangeVolume}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t{\n\t\t\t\tdose !== \"\" && volume !== \"\" &&\n\t\t\t\t<Results dose={Number(dose)} volume={Number(volume)} />\n\t\t\t}\n\t\t</StyledDiv>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}